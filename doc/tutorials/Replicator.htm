<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - Tutorial: Replicate the users from the PBX</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <script type="text/javascript">
        function toggleSpoiler(id) {
            var e = document.getElementById(id);
            if (e.style.display == "none") e.style.display = "";
            else e.style.display = "none";
        }
    </script>
</head>

<body>
    <h1>Tutorial: Replicate the users from the PBX</h1>

    <p>
        In this tutorial you will learn how replicate the users data from the PBX to your app.
    </p>

    <h2>Conventions</h2>
    <p>
        The used file and class names in this example are based on a newly created App with the name NewApp1 and the company name innovaphone. Your filenames might be different according to your settings.
        To be able to replicate, the app needs to have access to PbxTableUsers and need the name of the PBX.
    </p>

    <h2>Testing and expected behaviour</h2>
    <p>
        For testing the app we need to have several users on the PBX. When editing an user, the changes should be relicated to your database. You could check if the users and the changes are been replicated to your app by checking your database using for example Putty.
        You can connect to your database with Putty setting as Host Name the IP address of your AP Platform, as Port the 22 and as Connection type SSH. Then you have to login using your admin credentials provided by the installer and connecting to your database using PostgreSQL commands.
    </p>
    <h3>Connecting to your database</h3>
    <p><pre>psql -d databasename;</pre></p>

    <h3>Reading your users table</h3>
    <p><pre>select * from users;</pre></p>

    <h2>Step by step</h2>

    <!-- Task 1: Create your replicator object -->

    <h3>Task 1: Create your replicator object</h3>
    <p>
        On the constructor of your app instance, the replicator has to be declared. Here you can check the <a href="../../common/interface/replication.htm#IReplicator">Replicator</a> functions.
        After declaring the object, you can add fields to the replicator. There you can link the name of a data field from the PBX to a column from your database.
    </p>
    <p>
        <ul>
            <li>Include the replicator and tasks_postgresql header files.</li>
            <li>Allow the AppInstance class to use <code>JsonApiContext</code> as base class and the UReplicator.</li>
            <li>Declare the replicator object as public global variable from the app instance class on the header file.</li>
            <li>Create a new object <code>replicator</code> using the <code>IReplicator</code> class on your app instance constructor.</li>
            <li>Register your replicator object as a Json Api calling the function <code>RegisterJsonApi</code>.</li>
            <li>Call the <code>AddColumn</code> function to start the synchronization of <code>h323</code> field to your <code>username</code> column.</li>
            <li>Do the same for the <code>cn</code> field and your <code>cn</code> column.</li>
            <li>When an AppWebsocket connection is established, it needs to be added to the <code>JsonApiContext</code>.</li>
        </ul>
    </p>

    <button name="spoiler" style="height:30px; font-size:14px" onclick="toggleSpoiler('solution1');">Code spoiler</button>
    <div id="solution1" style="display:none">
        <p>
            Include the replicator and tasks_postgresql header file NewApp1.h
            <pre><code class="language-cpp">#include "common/interface/replication.h"
#include "common/lib/tasks_postgresql.h"
</code></pre>
        </p>
        <p>
            Include the replicator header file also on NewApp1-main.cpp
            <pre><code class="language-cpp">#include "common/interface/replication.h"
</code></pre>
        </p>
        <p>
            The AppInstance class needs to use JsonApiContext as base class and the UReplicator.
            <pre><code class="language-cpp">class NewApp1 : public AppInstance, ... , public UReplicator, public JsonApiContext</code></pre>
        </p>
        <p>
            Declare the replicator object as public global variable from the app instance class on the header file.
            <pre><code class="language-cpp">class IReplicator * replicator;</code></pre>
        </p>
        <p>
            Declaration of the replicator object
            <pre><code class="language-cpp">replicator = IReplicator::createReplicator(this, "PbxTableUsers", 0, 0, "domain", "pbx", database, "users", true, true);</code></pre>
        </p>
        <p>
            After createReplicator has been called the interface has to be registered in the JsonApiContext
            <pre><code class="language-cpp">RegisterJsonApi(replicator);</code></pre>
        </p>
        <p>
            Add h323 and cn fields to the replicator
            <pre><code class="language-cpp">replicator->AddColumn("h323", "username", ReplicationString, true);
replicator->AddColumn("cn", "cn", ReplicationString, true);</code></pre>
        </p>
        <p>
            When an AppWebsocket connection is established, this AppWebsocket connection needs to be added to the JsonApiContext
            <pre><code class="language-cpp">class NewApp1Session : ..., public AppWebsocket, ... {
...
}
void NewApp1Session::AppWebsocketMessage(class json_io& msg, word base, const char* mt, const char* src)
{
...
    if (!strcmp(mt, "PbxInfo")) {
        class JsonApi * jsonApi = newapp1->CreateJsonApi("PbxTableUsers", this, msg, base);
        if (jsonApi) jsonApi->JsonApiStart();
    }
}
</code></pre>
        </p>
    </div>

    <!-- Task 2: Adding the callback functions for the replicator -->

    <h3>Task 2: Adding the callback functions for the replicator</h3>
    <p>
        Now we need to add the callback functions for the replicator.
    </p>
    <p>
        <ul>
            <li>Add the <code>ReplicatorInitialized</code> function.</li>
            <li>Add the <code>ReplicatorAdded</code> function.</li>
            <li>Add the <code>ReplicatorDeleted</code> function.</li>
            <li>Add the <code>ReplicatorDeletedConfirm</code> function.</li>
            <li>Add the <code>ReplicatorDeletedConfirmComplete</code> function.</li>
            <li>Add the <code>ReplicatorUpdated</code> function.</li>
            <li>Add the <code>ReplicatorUpdate</code> function.</li>
            <li>Add the <code>ReplicatorStopped</code> function.</li>
            <li>Add the <code>ReplicatorStart</code> function.</li>
        </ul>
    </p>

    <button name="spoiler" style="height:30px; font-size:14px" onclick="toggleSpoiler('solution2');">Code spoiler</button>
    <div id="solution2" style="display:none">
        <p>
            Include the functions on the header file NewApp1.h
            <pre><code class="language-cpp">void ReplicatorInitialized();
void ReplicatorAdded(ulong64 id);
void ReplicatorDeleted(ulong64 id);
void ReplicatorDeletedConfirm(ulong64 id);
void ReplicatorDeletedConfirmComplete(ulong64 id);
void ReplicatorUpdated(ulong64 id, ulong64 mask);
void ReplicatorUpdate(class json_io& msg, word base, bool initial);
void ReplicatorStopped();
void ReplicatorStart(class json_io& msg, word base, char*& tmp) override;
</code></pre>
        </p>
        <p>
            Add the <code>ReplicatorInitialized</code> function
            <pre><code class="language-cpp">void NewApp1::ReplicatorInitialized()
{
}</code></pre>
        </p>
        <p>
            Add the <code>ReplicatorAdded</code> function
            <pre><code class="language-cpp">void NewApp1::ReplicatorAdded(ulong64 id)
{
}</code></pre>
        </p>
        <p>
            Add the <code>ReplicatorDeleted</code> function
            <pre><code class="language-cpp">void NewApp1::ReplicatorDeleted(ulong64 id)
{
    replicator->DeletedConfirm(id);
}</code></pre>
        </p>
        <p>
            Add the <code>ReplicatorDeletedConfirm</code> function
            <pre><code class="language-cpp">void NewApp1::ReplicatorDeletedConfirm(ulong64 id)
{
    currentTask = new TaskDeleteUser(this->database, id);
    currentTask->Start(&taskDeleteUser);
}</code></pre>
        </p>
        <p>
            Add the <code>ReplicatorDeletedConfirmComplete</code> function
            <pre><code class="language-cpp">void NewApp1::ReplicatorDeletedConfirmComplete(ulong64 id)
{
}</code></pre>
        </p>
        <p>
            Add the <code>ReplicatorUpdated</code> function
            <pre><code class="language-cpp">void NewApp1::ReplicatorUpdated(ulong64 id, ulong64 mask)
{
}</code></pre>
        </p>
        <p>
            Add the <code>ReplicatorUpdate</code> function
            <pre><code class="language-cpp">void NewApp1::ReplicatorUpdate(class json_io & msg, word base, bool initial)
{
}</code></pre>
        </p>
        <p>
            Add the <code>ReplicatorStopped</code> function
            <pre><code class="language-cpp">void NewApp1::ReplicatorStopped()
{
    delete replicator;
    replicator = 0;
    TryStop();
}</code></pre>
        </p>
        <p>
            Add the <code>ReplicatorStart</code> function
            <pre><code class="language-cpp">void NewApp1::ReplicatorStart(class json_io & msg, word base, char * & tmp)
{
    word handle = msg.add_array(base, "pseudo");
    msg.add_string(handle, nullptr, "");
    msg.add_string(handle, nullptr, "executive");
}</code></pre>
        </p>

    </div>

    <!-- Task 3: Add users table to your database -->

    <h3>Task 3: Add users table to your database</h3>
    <p>
        The table to save the replicated data from the PBX needs to be added. Here you can check the <a href="../../common/interface/database.htm">Database</a> functions. You can also check this
        <a href="/DatabaseTutorial.htm">Database Tutorial</a> about how to use the database.
    </p>
    <p>
        <ul>
            <li>Initialize the <code>users</code> table.</li>
            <li>Add <code>id</code>, <code>username</code> and <code>cn</code> columns to the table.</li>
            <li>Add a constraint to the username, which must be unique.</li>
            <li>Add the Init callbacks to the NewApp1 class and the TaskDatabaseInit task.</li>
        </ul>
    </p>

    <button name="spoiler" style="height:30px; font-size:14px" onclick="toggleSpoiler('solution3');">Code spoiler</button>
    <div id="solution3" style="display:none">
        <p>
            Initialize the <code>users</code> table and add <code>id</code>, <code>username</code> and <code>cn</code> columns to the table.
            <pre><code class="language-cpp">AppTaskDatabaseInit::AppTaskDatabaseInit(IDatabase * database) :
initUsers(database, "users")
{
    this->database = database;
    initUsers.AddColumn("id", "BIGSERIAL PRIMARY KEY NOT NULL");
    initUsers.AddColumn("username", "VARCHAR");
    initUsers.AddColumn("cn", "VARCHAR");
    initUsers.AddConstraint("const_username", "UNIQUE (username)");
}
AppTaskDatabaseInit::~AppTaskDatabaseInit()
{
}
void AppTaskDatabaseInit::Start(class UTask * user)
{
    this->user = user;
    initUsers.Start(this);
}
void AppTaskDatabaseInit::TaskComplete(class ITask * const task)
{
    user->TaskComplete(this);
}
void AppTaskDatabaseInit::TaskFailed(class ITask * const task)
{
    user->TaskFailed(this);
}
void AppTaskDatabaseInit::DatabaseError(IDatabase * const database, db_error_t error)
{
    user->TaskFailed(this);
}
void AppTaskDatabaseInit::DatabaseExecSQLResult(IDatabase * const database, IDataSet * dataset)
{
    delete dataset;
    dataset = 0;
}
</code></pre>
        </p>
        <p>
            Add the Init callbacks to the NewApp1 class and the TaskDatabaseInit task  to the header file NewApp1.h.
            <pre><code class="language-cpp">void DatabaseInitComplete(class TaskDatabaseInit * task);
void DatabaseInitFailed(class TaskDatabaseInit * task);
class UTaskTemplate&lt;NewApp1, class TaskDatabaseInit&gt; taskDatabaseInit;
class ITask * tableSetup;
                </code></pre>
        </p>
        <p>
            And to the NewApp1.cpp file.
            <pre><code class="language-cpp">NewApp1::NewApp1(...) : 
AppInstance(service, args),
taskDatabaseInit(this, &NewApp1::DatabaseInitComplete, &NewApp1::DatabaseInitFailed)
{
    ...
void NewApp1::DatabaseInitComplete(class TaskDatabaseInit* task)
{
}

void NewApp1::DatabaseInitFailed(class TaskDatabaseInit* task)
{
	TryStop();
}
}
                </code></pre>
        </p>
    </div>
    <!-- Task 4: Start the replicator -->

    <h3>Task 4: Start the replicator</h3>
    <p>
        The table to save the replicated data from the PBX needs to be added. Here you can check the <a href="../../common/interface/database.htm">Database</a> functions. You can also check this
        <a href="DatabaseTutorial.htm">Database Tutorial</a> about how to use the database.
    </p>
    <p>
        <ul>
            <li>When <code>DatabaseConnectComplete</code> is called the database can be initialized.</li>
            <li>When <code>DatabaseInitComplete</code> is called the replicator must be started.</li>
            <li>When the replicator has started, the <code>webserverPlugin</code> Listen functions can be called. The <code>replicator->Update()</code> function has to be called to set the PBX name.</li>
        </ul>
    </p>

    <button name="spoiler" style="height:30px; font-size:14px" onclick="toggleSpoiler('solution4');">Code spoiler</button>
    <div id="solution4" style="display:none">
        <p>
            When <code>DatabaseConnectComplete</code> is called the database can be initialized.
            <pre><code class="language-cpp">void NewApp1::DatabaseConnectComplete(IDatabase * const database)
{
    this->tableSetup = new AppTaskDatabaseInit(database);
    this->tableSetup->Start(&taskDatabaseInit);
}</code></pre>
        </p>
        <p>
            When <code>DatabaseInitComplete</code> the replicator must be started.
            <pre><code class="language-cpp">void NewApp1::DatabaseInitComplete(class TaskDatabaseInit * task)
{
    replicator->Initialize("BIGINT REFERENCES users(id) ON DELETE CASCADE NOT NULL");
}</code></pre>
        </p>
        <p>
            When the replicator has started, the <code>webserverPlugin</code> Listen functions can be called. The <code>replicator->Update()</code> function has to be called to set the PBX name.
            <pre><code class="language-cpp">void NewApp1::ReplicatorInitialized()
{
    this->webserverPlugin->HttpListen(0, 0, 0, 0, _BUILD_STRING_);
    this->webserverPlugin->WebsocketListen();
    replicator->Update(args.appDomain, pbxName);  
}</code></pre>
        </p>
    </div>
    <!-- Task 5: Add and configure your App Object on the PBX -->

    <h3>Task 5: Add and configure your App Object on the PBX</h3>
    <p>
        You need to configure for App Object on the PBX and give it access to the PbxTableUsers and the Websocket flags.
    </p>
    <p>
        <ul>
            <li>Open your App Platform Manager and when you click on edit your app instance you should see the URL of your app.</li>
            <li>Add your App Object on the PBX and enter this URL on the URL field.</li>
            <li>Select the TableUsers and Websokect checkmarks.</li>
        </ul>
    </p>

    <button name="spoiler" style="height:30px; font-size:14px" onclick="toggleSpoiler('solution5');">Code spoiler</button>
    <div id="solution5" style="display:none">
        <p>
            Open your App Platform Manager and when you click on edit your app instance you should see the URL of your app. It should be something like this:
            <pre><code class="language-cpp">http://XXX.XX.XXX.XXX/domain.com/newapp1/helloworld</code></pre>
        </p>
    </div>

    <!-- Task 6: Add groups table to your database and replicate the groups data -->

    <h3>Task 6: Add groups table to your database and replicate the groups data</h3>
    <p>
        The table to save the replicated data from the PBX needs to be added. Here you can check the <a href="../../common/interface/database.htm">Database</a> functions. You can also check this
        <a href="DatabaseTutorial.htm">Database Tutorial</a> about how to use the database.
    </p>
    <p>
        <ul>
            <li>Add the <code>groups</code> table and the <code>id</code>, <code>group_name</code>, <code>active</code>, <code>mode</code> and <code>dyn</code> columns.</li>
            <li>Add <code>id</code>, <code>group_name</code>, <code>active</code>, <code>mode</code> and <code>dyn</code> columns to the replicator.</li>
        </ul>
    </p>

    <button name="spoiler" style="height:30px; font-size:14px" onclick="toggleSpoiler('solution6');">Code spoiler</button>
    <div id="solution6" style="display:none">
        <p>
            Add the <code>groups</code> table and the <code>id</code>, <code>group_name</code>, <code>active</code>, <code>mode</code> and <code>dyn</code> columns.
            <pre><code class="language-cpp">AppTaskDatabaseInit::AppTaskDatabaseInit(IDatabase * database) :
initUsers(database, "users"),
initGroups(database, "groups")
{
    this->database = database;
    initUsers.AddColumn("id", "BIGSERIAL PRIMARY KEY NOT NULL");
    initUsers.AddColumn("guid", "UUID UNIQUE NOT NULL");
    initUsers.AddColumn("username", "VARCHAR");
    initUsers.AddColumn("cn", "VARCHAR");
    initGroups.AddColumn("id", "BIGSERIAL PRIMARY KEY NOT NULL");
    initGroups.AddColumn("group_name", "VARCHAR");
    initGroups.AddColumn("active", "BOOLEAN");
    initGroups.AddColumn("mode", "VARCHAR");
    initGroups.AddColumn("dyn", "VARCHAR");
    initGroups.AddColumn("user_id", "BIGINT REFERENCES users(id) ON DELETE CASCADE NOT NULL");
}
AppTaskDatabaseInit::~AppTaskDatabaseInit()
{
}
void AppTaskDatabaseInit::Start(class UTask * user)
{
    this->user = user;
    initUsers.Start(this);
}
void AppTaskDatabaseInit::TaskComplete(class ITask * const task)
{
    if (task == &initUsers) initGroups.Start(this);
    else if (task == &initGroups) user->TaskComplete(this);
    else user->TaskComplete(this);
}</code></pre>
        </p>
        <p>
            Add <code>id</code>, <code>group_name</code>, <code>active</code>, <code>mode</code> and <code>dyn</code> columns to the replicator.
            <pre><code class="language-cpp">replicator = IReplicator::createReplicator(this, "PbxTableUsers", 0, 0, "domain", "pbx", database, "users", true, true);
RegisterJsonApi(replicator);
replicator->AddColumn("guid", "guid", ReplicationString, false);
replicator->AddColumn("h323", "username", ReplicationString, true);
replicator->AddColumn("cn", "cn", ReplicationString, true);
class IReplicatorArray * rArrayGroups = replicator->AddArray("grps", "groups", true, "user_id");
rArrayGroups->AddColumn("name", "group_name", ReplicationString, true);
rArrayGroups->AddColumn("mode", "mode", ReplicationString, true);
rArrayGroups->AddColumn("dyn", "dyn", ReplicationString, true);</code></pre>
        </p>
    </div>

    <h2>Other considerations</h2>
    <p>The are functions that must be called when your database changes (when a user is added, updated or deleted):</p>
    <table style="margin-left:-12px">
        <tr><td class="param"><b>newapp1->replicator->Added(id)</b></td><td>This must be called when a user is added on your database, so that the replicator will add it too.</td></tr>
        <tr><td class="param"><b>newapp1->replicator->Updated(id)</b></td><td>This must be called when a user is updated on your database, so that the replicator will update it too.</td></tr>
        <tr><td class="param"><b>newapp1->replicator->Deleted(id)</b></td><td>This must be called when you would like to delete a user from your database.</td></tr>
    </table>

    <h2>List of data fields that can be replicated</h2>
    <p></p>
    <h3>Table <code>users</code></h3>
    <p>Table with the user data</p>
    <table style="margin-left:-12px">
        <tr><td class="param">ReplicationString</td><td><b>guid</b></td><td>Globally unique identifier</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>h323</b></td><td>Username</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>pwd</b></td><td>Password</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>cn</b></td><td>Common name</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>dn</b></td><td>Display name</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>apps-my</b></td><td>List of the apps displayed on the home screen</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>config</b></td><td>Config template</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>node</b></td><td>Node</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>loc</b></td><td>Location</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>hide</b></td><td>Hide from LDAP</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>e164</b></td><td>Phone number</td></tr>
        <tr><td class="param">ReplicationTristate</td><td><b>cfpr</b></td><td>Call forward based on Presence</td></tr>
        <tr><td class="param">ReplicationTristate</td><td><b>t-cfpr</b></td><td>Call forward based on Presence inherited from the config template</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>pseudo</b></td><td>Pseudo information of the object</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>h323-email</b></td><td>If true, the email is the username</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>apps</b></td><td>List of the apps that the user has rights to access</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>fax</b></td><td>If true, the user has a fax license</td></tr>
    </table>
    <h3>Table <code>emails</code></h3>
    <p>Table with the emails of the users</p>
    <table style="margin-left:-12px">
        <tr><td class="param">ReplicationString</td><td><b>email</b></td><td>Email</td></tr>
    </table>
    <h3>Table <code>allows</code></h3>
    <p>Table with the visibility filters defined for the user</p>
    <table style="margin-left:-12px">
        <tr><td class="param">ReplicationString</td><td><b>name</b></td><td>Filter name</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>grp</b></td><td>If true, the name is a group name</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>visible</b></td><td>Visible</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>online</b></td><td>Online</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>presence</b></td><td>Presence</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>otf</b></td><td>On the phone</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>note</b></td><td>Presence note</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>dialog</b></td><td>Calls</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>ids</b></td><td>Calls with id</td></tr>
    </table>
    <h3>Table <code>t-allows</code></h3>
    <p>Table with the visibility filters defined on the config templates</p>
    <table style="margin-left:-12px">
        <tr><td class="param">ReplicationString</td><td><b>name</b></td><td>Filter name</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>grp</b></td><td>If true, the name is a group name</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>visible</b></td><td>Visible</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>online</b></td><td>Online</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>presence</b></td><td>Presence</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>otf</b></td><td>On the phone</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>note</b></td><td>Presence note</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>dialog</b></td><td>Calls</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>ids</b></td><td>Calls with id</td></tr>
    </table>
    <h3>Table <code>grps</code></h3>
    <p>Table with the users groups</p>
    <table style="margin-left:-12px">
        <tr><td class="param">ReplicationString</td><td><b>name</b></td><td>Group name</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>mode</b></td><td>Mode</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>dyn</b></td><td>Dynamic</td></tr>
    </table>
    <h3>Table <code>devices</code></h3>
    <p>Table with the users devices</p>
    <table style="margin-left:-12px">
        <tr><td class="param">ReplicationString</td><td><b>hw</b></td><td>Hardware ID</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>text</b></td><td>Name</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>app</b></td><td>App</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>admin</b></td><td>PBX Pwd</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>no-filter</b></td><td>No IP Filter</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>tls</b></td><td>TLS only</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>no-mob</b></td><td>No Mobility</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>trusted</b></td><td>Reverse Proxy</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>sreg</b></td><td>Single Reg.</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>mr</b></td><td>Media Relay</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>voip</b></td><td>Config VOIP</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>gk-id</b></td><td>Gatekeeper ID</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>prim</b></td><td>Primary gatekeeper</td></tr>
    </table>
    <h3>Table <code>cds</code></h3>
    <p>Table with the users call diversions</p>
    <table style="margin-left:-12px">
        <tr><td class="param">ReplicationString</td><td><b>type</b></td><td>Diversion type (cfu, cfb or cfnr)</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>bool</b></td><td>Boolean object</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>bool-not</b></td><td>Not flag (boolean object)</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>e164</b></td><td>Phone number</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>h323</b></td><td>Username</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>src</b></td><td>Filters data on XML format</td></tr>
    </table>
    <h3>Table <code>forks</code></h3>
    <p>Table with the users forks</p>
    <table style="margin-left:-12px">
        <tr><td class="param">ReplicationString</td><td><b>e164</b></td><td>Phone number</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>h323</b></td><td>Username</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>bool</b></td><td>Boolean object</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>bool-not</b></td><td>Not flag (boolean object)</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>mobility</b></td><td>Mobility object</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>app</b></td><td>App</td></tr>
        <tr><td class="param">ReplicationUnsigned</td><td><b>delay</b></td><td>Delay</td></tr>
        <tr><td class="param">ReplicationString</td><td><b>hw</b></td><td>Device</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>off</b></td><td>Disable</td></tr>
        <tr><td class="param">ReplicationBool</td><td><b>cw</b></td><td>Call-Waiting</td></tr>
        <tr><td class="param">ReplicationUnsigned</td><td><b>min</b></td><td>Min-Alert</td></tr>
        <tr><td class="param">ReplicationUnsigned</td><td><b>max</b></td><td>Max-Alert</td></tr>
    </table>

    <h2>Useful documentation</h2>
    <ul>
        <li><a href="../../common/interface/replication.htm">Replicator</a></li>
        <li><a href="../appwebsocket/PbxTableUsers.htm">PbxTableUsers</a></li>
        <li><a href="../../common/interface/database.htm">Database</a></li>
        <li><a href="DatabaseTutorial.htm">Database Tutorial</a></li>
    </ul>
</body>
</html>
