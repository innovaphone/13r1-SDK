<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>appwebsocket</title>
    <link rel="stylesheet" href="../doc/innovaphone.doc.css" type="text/css" />
</head>

<body>
    <h1>appwebsocket</h1>
    <hr/>
    <h2>innovaphone.appwebsocket.Connection(url, app)</h2>
    <p>
        Creates an websocket connection to 'url' for an app entity named 'app'.
        It uses the Javascript function opener.GetLogin(app,challenge,onlogin(app, user, key))
        to obtain login credentials from the web page which opened the app.
    </p>
    <p>
        It provides a send function to send messages. The messages are provided to the send
        function as javascript object, which are JSON coded by the library. For receiving messages
        a onmessage handler is provided.
    </p>
    <p>
        To route messages to multiple objects inside the App a mechanism is provided with the
        this.src constructor function. The idea is, that each object, which independtly sends
        and receives messages using the same websocket connection allocates an object with this
        constructor function. Each object is identifies itself by a name, which has to be unique
        within the App. Then the send and onmessage functions of this 'src' object are used
        to send and receive messages. This mechanism uses the 'src' member inside the JSON
        messages.
    </p>
    <dl>
        <dt>this.onconnected = function(domain, user, dn, appdomain) { }</dt>
        <dd>
            To be overwritten by the app. Is called, when the connection is established.
            <dl>
                <dt>domain</dt>
                <dd>Domain of the looged in user</dd>
                <dt>user</dt>
                <dd>username of the logged in user</dd>
                <dt>dn</dt>
                <dd>Display name of the logged in user</dd>
                <dt>appdomain</dt>
                <dd>Domain of the App Instance to which the user is logged in</dd>
            </dl>
        </dd>
        <dt>this.onmessage = function (message) { }</dt>
        <dd>
            To be overwritten by the app. Is called when a message is received. The argument
            'message' is a javascript object constructed from the received json message.
        </dd>
        <dt>this.onerror = function (error) { }</dt>
        <dd>
        </dd>
        <dt>this.onclosed = function () { }</dt>
        <dd>
        </dd>
        <dt>this.src = function (src)</dt>
        <dd>
            Constructor function to create an object, which routes received messages based on
            the string 'src'. This can be used, if the app contains different objects, which
            independently send requests and receive responses or indications.
            Each object may allocate a src object and set the onmessage member of this object
            to receive messages.
            If the send function of this src object is used, a member 'src' is added to each
            sent JSON message.
        </dd>
        <dt>this.checkBuild</dt>
        <dd>
            Boolean. If set to true, the CheckBuild mechanism will be used.
        </dd>
        <dt>this.setKeepAlive = function (on)</dt>
        <dd>
            Turns KeepAlive on or off. If on, a "KeepAlive" message will be sent to the server
            from time to time in order to detect if the connection is still up.
        </dd>
        <dt>this.encrypt = function (seed, data)</dt>
        <dd>
            Returns ecrypted data based on a certain seed. RC4 is used in combination with a session key which is calculated during the login handshake.
        </dd>
        <dt>this.decrypt = function (seed, data)</dt>
        <dd>
            Returns decrypted data based on a certain seed. RC4 is used in combination with a session key which is calculated during the login handshake.
        </dd>
    </dl>
    <hr/>
    <h2>Messages</h2>
    <p>
        See the protocol definition here: <a href="../../doc/appwebsocket/AppWebsocket.htm">AppWebsocket</a>.
    </p>
</body>
</html>
