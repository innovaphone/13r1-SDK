<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - sysclient protocol</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>

<body>
    <h1>Sysclient protocol</h1>

    <p>
        The sysclient protocol is used for devices to register in the Devices App and to tunnel HTTP connections to access the device UI through the Devices App.<br/>
        <b>Binary</b> websocket messages are used for the communication.
	</p>

    <h1>Summary</h1>
    <a href="#DevicesApp" style="text-decoration:none;">DevicesApp</a><br/>
    <a href="#BinaryProtocol" style="text-decoration:none;">Binary protocol</a><br/>
    <a href="#SysclientHeader" style="text-decoration:none;">&nbsp;&nbsp;&nbsp;&nbsp;Sysclient message header</a><br/>
    <a href="#SMTAdmin" style="text-decoration:none;">&nbsp;&nbsp;&nbsp;&nbsp;Admin message header</a><br/>
    <a href="#SMTTunnel" style="text-decoration:none;">&nbsp;&nbsp;&nbsp;&nbsp;Tunnel message header</a><br/>
    
	<a name="DevicesApp"><h2>Devices App</h2></a>
    
    <p>
        The Devices App provides a URL to which so called "sysclients" can connect to. The URL e.g. looks like this: wss://app-platform-dns/domain.com/devices/sysclients<br/>
        Any sysclient which connects to this URL will not be added to any domain inside the Devices App as long as it can't answer the challenge request successfully.
    </p>
    
    <a name="BinaryProtocol"><h2>Binary protocol</h2></a>
    <p>
        The first byte of each message contains the sysclient message type.
        <pre><code class="c++">
// An sysclient message has the following format (depending on the value of the message type - SMT = sysclient message type):
//
// SMT | Byte offset
//     |  0      1      2      3      4      5      6      7      8      9     ...
//     +------+------+------+------+------+------+------+------+------+------+------+
//  1  | Msg- |   Adm-Msg   | Data.........
// --- | Type +------+------+------+------+------+------+------+------+------+------+
//  2  |      |        Session-ID         |         Event-Type        |  Data.....
//     +------+------+------+------+------+------+------+------+------+------+------+

</code></pre>
    </p>
    
    <a name="SysclientHeader"><h2>Sysclient message header</h2></a>
    1 byte: the sysclient message header is a byte value starting with 1<br/><br/>
    <a href="#SMTAdmin" style="text-decoration:none;">0x01: Admin message header</a><br/>
    <a href="#SMTTunnel" style="text-decoration:none;">0x02: Tunnel message header</a><br/>
    
    <a name="SMTAdmin"><h3>Admin message header</h3></a>
    1 word: there are different administrative messages. The admin message type is written into a word.<br/>
    The data following this admin message header is a non null terminated JSON string.
    <br/><br/>
    <a href="#AMTIdentify" style="text-decoration:none;">0x0000: Send identify</a><br/>
    <a href="#AMTPassword" style="text-decoration:none;">0x0001: Receive sysclient password</a><br/>
    <a href="#AMTChallenge" style="text-decoration:none;">0x0002: Receive challenge</a><br/>
    <a href="#AMTAdmin" style="text-decoration:none;">0x0003: Receive new administrative password</a><br/>
    <a href="#AMTProvision" style="text-decoration:none;">0x0004: Provision</a><br/>
    <a href="#AMTProvisionResult" style="text-decoration:none;">0x0005: Provision result</a><br/>
    <a href="#AMTConfiguration" style="text-decoration:none;">0x0006: Configuration</a><br/>
    
    <h3>Message flow of admin messages</h3>
    
    <ul>
        <li>The sysclient connects to the Devices App.</li>
        <li>The sysclient sends the <a href="#AMTIdentify">identify admin message</a>.</li>
        <li>The sysclient receives a <a href="#AMTChallenge">challenge admin message</a> from the Devices App if already inside a domain.</li>
        <li>The sysclient sends the <a href="#AMTIdentify">identify admin message</a> with the calculated digest.</li>
        <li>The sysclient receives a <a href="#AMTAdmin">admin password message</a> from the Devices App if already inside a domain and the domain provides its password to all devices.<br/>
            This message can be always received, e.g. if the domain password gets changed.
        </li>
        <li>If the sysclient is added to a domain during this session, an <a href="#AMTPassword">admin sysclient password</a> message is received.</li>
    </ul>
    
    <a name="AMTIdentify"><h4>0x0000: Send identify</h4></a>
    The identify JSON is a JSON object. The sysclient sends this message after the connection establishment towards the Devices App:
    <h4>Parameters</h4>
    <table style="margin-left:-12px">
        <tr><td class="param">string <b>id </b></td><td>The unique hardware id.</td></tr>
        <tr><td class="param">string <b>product </b></td><td>The product name, e.g. IP222.</td></tr>
        <tr><td class="param">string <b>version </b></td><td>The complete version string, e.g. 13r2 dvl [13.4250/131286/1300].</td></tr>
        <tr><td class="param">object <b>platform </b></td><td>A JSON object which contains data about the platform.</td></tr>
        <tr>
            <td/>
            <td>
            <table style="margin-left:-12px">
                <tr><td class="param">string <b>type </b></td><td>The device type, possible values are VA|GW|PHONE|DECT|APP_PLATFORM.</td></tr>
                <tr><td class="param">boolean <b>fxs</b> (optional)</td><td>Devices has FXS interfaces.</td></tr>
            </table>
            </td>
        </tr>
        <tr><td class="param">string <b>name</b> (optional)</td><td>Name which is configured on the client itself (is superceded by the configured name in the Devices App).</td></tr>
        <tr><td class="param">string <b>fwBuild</b> (optional)</td><td>The firmware build number, e.g. 13233.</td></tr>
        <tr><td class="param">string <b>bcBuild</b> (optional)</td><td>The bootcode build number, e.g. 13233.</td></tr>
        <tr><td class="param">string <b>major</b> (optional)</td><td>The major release, e.g. 13r1.</td></tr>
        <tr><td class="param">string <b>fw</b> (optional)</td><td>The firmware filename, e.g. ip222.bin.</td></tr>
        <tr><td class="param">string <b>bc</b> (optional)</td><td>The bootcode filename, e.g. boot222.bin.</td></tr>
        <tr><td class="param">string <b>provisioningCode</b> (optional)</td><td>The  provisioning code used to be added to a domain.</td></tr>
        <tr><td class="param">string <b>digest</b> (optional)</td><td>The calculated digest after receiving a new challenge to authenticate in a domain.</td></tr>
        <tr><td class="param">boolean <b>mini</b> (optional)</td><td>Minifirmware booted.</td></tr>
        <tr><td class="param">boolean <b>pbxActive</b> (optional)</td><td>PBX active or not.</td></tr>
        <tr><td class="param">boolean <b>other</b> (optional)</td><td>true means, that this is not an innovaphone device. The "Admin UI" tab in the Devices UI is not available in this case.</td></tr>
        <tr><td class="param">array <b>ethIfs </b> (optional)</td><td>A JSON array containing JSON objects with the following parameters:</td></tr>
        <tr>
            <td/>
            <td>
            <table style="margin-left:-12px">
                <tr><td class="param">string <b>if </b></td><td>The ethernet interface name.</td></tr>
                <tr><td class="param">string <b>ipv4</b> (optional)</td><td>The IPv4 address.</td></tr>
                <tr><td class="param">string <b>ipv6</b> (optional)</td><td>The IPv6 address.</td></tr>
            </table>
            </td>
        </tr>
        
    </table>
    
    <h4>Example JSON object</h4>
    <pre><code class="javascript">
{
  "id": "009033460af2",
  "product": "IP222",
  "version": "13r2 dvl [13.4250\/131286\/1300]",
  "fwBuild": "134250",
  "bcBuild": "131286",
  "major": "13r2",
  "fw": "ip222.bin",
  "bc": "boot222.bin",
  "mini": false,
  "platform": {
    "type": "PHONE"
  },
  "digest": "f3d37205d8eb93a4ccdd236b5a957c98d629d925aa58fe03b770035853c12984",
  "ethIfs": [
    {
      "if": "ETH0",
      "ipv4": "172.16.4.141",
      "ipv6": "2002:91fd:9d07:0:290:33ff:fe46:af2"
    }
  ]
}</pre></code>
    
    <a name="AMTPassword"><h4>0x0001: Receive sysclient password</h4></a>
    The password JSON is a JSON object. The message is received when the device is added to a domain inside the Devices App.<br/>
    The password must be stored on the client device to successfully answer a challenge request for future connections.
    <h4>Parameters</h4>
    <table style="margin-left:-12px">
        <tr><td class="param">string <b>password </b></td><td>The password for this sysclient.</td></tr>
    </table>
    
    <a name="AMTChallenge"><h4>0x0002: Receive challenge</h4></a>
    The challenge JSON is a JSON object. The message is received when the device identified to the Devices App and is already inside a domain:
    <h4>Parameters</h4>
    <table style="margin-left:-12px">
        <tr><td class="param">string <b>challenge </b></td><td>A challenge to calculate a digest and send it with another identify message.</td></tr>
    </table>
    
    <h4>Digest calculation</h4>
    Calculate the digest with the received challenge and the password from the <a href="#AMTPassword">password message</a>.<br/>
    The digest is an SHA256 hex string of:<br/>
    HardwareId:product:version:challenge:password<br/>
    <br/>
    A c++ implementation could look like this:
    <pre><code class="c++">class hash hash;
byte digest_bin[HASH_SIZE_SHA256];
char digest[HASH_SIZE_SHA256 * 2 + 1];
hash.init(HASH_SHA256);
hash.update(id, strlen(id));
hash.update(":", 1);
hash.update(product, strlen(product));
hash.update(":", 1);
hash.update(version, strlen(version));
hash.update(":", 1);
hash.update(challenge, strlen(challenge));
hash.update(":", 1);
hash.update(password, strlen(password));
hash.final(digest_bin);
str::from_hexmem(digest_bin, HASH_SIZE_SHA256, digest);
</code></pre>
    
    <a name="AMTAdmin"><h4>0x0003: Receive new administrative password</h4></a>
    The administrative password JSON is a JSON object. This message is always received after a successfull connection to a domain if the domain provides a password to all devices:
    <h4>Parameters</h4>
    <table style="margin-left:-12px">
        <tr><td class="param">string <b>seed </b></td><td>A seed for decrypting the password.</td></tr>
        <tr><td class="param">string <b>pwd </b></td><td>The encrypted password.</td></tr>
    </table>
    
    <h4>Password decryption</h4>
    The password is RC4 encrypted with the sysclient password from the <a href="#AMTPassword">password message</a>.<br/>
    <br/>
    A c++ decryption could look like this:
    <pre><code class="c++">size_t len = strlen(pwdEncrypted);
size_t outLen = len / 2 + 1;
char * k = (char *)alloca(strlen(seed) + strlen(sysclientPassword) + 2);
char * pwdDecrypted = (char *)alloca(outLen);
byte * i = (byte *)alloca(outLen);
len = str::to_hexmem(pwdEncrypted, i, outLen);
_sprintf(k, "%s:%s", seed, sysclientPassword);
Cipher c;
c.Init(CIPHER_RC4, (const byte *)k, strlen(k), false);
c.Crypt(i, (byte*)pwdDecrypted, len);
pwdDecrypted[len] = '\0';
</code></pre>

    <a name="AMTProvision"><h4>0x0004: Provision</h4></a>
    The provision JSON is a JSON object. The sysclient sends this message to provision a new FXS interface:
    <h4>Parameters</h4>
    <table style="margin-left:-12px">
        <tr><td class="param">string <b>id </b></td><td>The interface id, e.g. TEL1.</td></tr>
        <tr><td class="param">string <b>code </b></td><td>The provisioning code.</td></tr>
    </table>
    
    <a name="AMTProvisionResult"><h4>0x0005: Provision result</h4></a>
    The provision result JSON is a JSON object. It is the answer to the provision message:
    <h4>Parameters</h4>
    <table style="margin-left:-12px">
        <tr><td class="param">string <b>error </b>(optional)</td><td>If not empty, an error occurred.</td></tr>
    </table>
    
    <a name="AMTConfiguration"><h4>0x0006: Configuration</h4></a>
    The config JSON is a JSON object. If the sysclient sent "other":true inside its identify message, it will receive all config items from the devices app.<br/>
    The config items are explained inside the Devices App Service documentation. Here, just one parameter is added to know, when the last config item has been received.<br/>
    But on config changes, another message will be received.
    <h4>Parameters</h4>
    <table style="margin-left:-12px">
        <tr><td class="param">boolean <b>last </b>(optional)</td><td>If last is set, the last config item from the intial config item messages is received.</td></tr>
    </table>
    
    <a name="SMTTunnel"><h3>Tunnel message header</h3></a>
    The tunnel message header always contains a session id with corresponds to one HTTP request.<br/>
    The session id is followed by the event type, which allows the handling of the HTTP data.<br/>
    <br/>
    1 dword: session id<br/>
    1 dword: event type<br/>
    <br/>
    The following event types exist:
    <br/><br/>
    <a href="#TETSocketSend" style="text-decoration:none;">0x00000000: socket send</a><br/>
    <a href="#TETSocketRecv" style="text-decoration:none;">0x00000001: socket receive</a><br/>
    <a href="#TETSocketRecvResult" style="text-decoration:none;">0x00000002: socket receive result</a><br/>
    <a href="#TETSocketSendResult" style="text-decoration:none;">0x00000003: socket send result</a><br/>
    <a href="#TETSocketShutdown" style="text-decoration:none;">0x00000004: socket shutdown</a><br/>
    
    <h3>Message flow of socket messages</h3>
    If a new connection to a sysclient is established through the Devices App, the sysclient receives the tunnel message with a socket send event type and a new session id.<br/>
    The sysclient itself is responsible to handle multiple sessions and the flow of the events.<br/>
    In addition the sysclient must now forward the received data to the local webserver and afterwards send the answer transparently back.<br/>
    <br/>
    <ul>
        <li>A <a href="#TETSocketSend">socket send</a> is received with a new session id.</li>
        <li>The sysclient sends a <a href="#TETSocketSendResult">socket send result</a> with the session id.</li>
        <li>A <a href="#TETSocketSend">socket send</a> is received if further data must be sent to the local webserver. Answer with  <a href="#TETSocketSendResult">socket send results</a> in this case.</li>
        <li>A <a href="#TETSocketRecv">socket recv</a> is received to receive new data from the local webserver.</li>
        <li>The sysclient sends a <a href="#TETSocketSendResult">socket recv result</a> with the session id and the data from the local webserver.</li>
        <li>A <a href="#TETSocketRecv">socket recv</a> might be received multiple times until all data is read.</li>
        <li>A <a href="#TETSocketShutdown">socket shutdown</a> is received to indicate that this HTTP request is finished.</li>
        <li>A <a href="#TETSocketShutdown">socket shutdown</a> is sent from the sysclient as a confirmation.</li>
    </ul>
    
    <a name="TETSocketSend"><h4>0x00000000: socket send</h4></a>
    After the tunnel message header, just HTTP data is received and must be forwarded to the local webserver.
    
    <a name="TETSocketRecv"><h4>0x00000001: socket receive</h4></a>
    The tunnel message header is followed by a socket receive header:<br/>
    <br/>
    1 dword: the length of data to receive
    
    <a name="TETSocketRecvResult"><h4>0x00000002: socket receive result</h4></a>
    The tunnel message header is followed by the received data from the local webserver.
    
    <a name="TETSocketSendResult"><h4>0x00000003: socket send result</h4></a>
    No further data is sent.
    
    <a name="TETSocketShutdown"><h4>0x00000004: socket shutdown</h4></a>
    No further data is sent. A sysclient must also send this message as an answer to a <a href="#TETSocketShutdown">socket shutdown</a> message.
</body>
</html>
