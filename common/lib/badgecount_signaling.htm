<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - STasks</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>

<body>

    <h1>BadgeCountSignaling</h1>

    <p>
        The BadgeCountSignaling library implements the handling of presence subscription calls sent
        to the AppService. This is used by the myApps client to display Badge Counts on the App Icon.
    </p>

    <h2>Dependencies</h2>

    <dd>
        <dl>
            <dt>AppWebsocket</dt>
            <dd>
                The AppWebsocket library is used to receive the subscription calls as JSON signaling
            </dd>
            <dt>AppUpdates</dt>
            <dd>
                It is assumed that the Websocket Session uses the class AppUpdatesSession as base class
                so that this class can be used for the Websocket interface.
            </dd>
        </dl>
    </dd>

    <h2>File information</h2>

    <table style="margin-left:-12px">
        <tr><td><b>File</b></td><td>common/interface/stask.h<br><br></td></tr>
        <tr>
            <td><b>Classes</b></td>
            <td>
                <a href="#UBadgeCountSignaling">UBadgeCountSignaling</a><br/>
                <a href="#BadgeCountSignaling">BadgeCountSignaling</a><br/>
                <a href="#BadgeCountCall">BadgeCountCall</a><br/>
                <a href="#BadgeCountPresenceMonitor">BadgeCountPresenceMonitor</a><br/>
                <br>
            </td>
        </tr>
    </table>

    <h1>Classes</h1>

    <h2 id="UBadgeCountSignaling">UBadgeCountSignaling</h2>
    <dd>
        This class must be allocated by the application, typically as base class to the instance class.
        The library uses the callback to allocate an appropriate instance when a presence subscription
        is received
    </dd>
    <pre><code class="language-cpp">class UBadgeCountSignaling {

public:
    virtual void CreateBadgeCountPresenceMonitor(class BadgeCountSignaling * signaling, int call, const char * user, const char * topic) = 0;
};</code></pre>



    <div class="fnhead">virtual void CreateBadgeCountPresenceMonitor(class BadgeCountSignaling * signaling, int call, const char * user, const char * topic) = 0;</div>

    <dd>
        In this call the application has to allocate a class which uses BadgeCountPresenceMonitor
        as base class, which will then handle the subscription call. For this the arguments signaling
        and call have to be used
    </dd>
    <dl>
        <dt>user</dt>
        <dd>
            SIP uri of he originating user of the presence subscription
        </dd>
        <dt>topic</dt>
        <dd>
            SIP URI used as destination for the presence subscription
        </dd>
    </dl>

    <h2 id="BadgeCountSignaling">BadgeCountSignaling</h2>

    <dd>
        This class must be allocated by the application for each AppWebsocket session from the PBX,
        typically when the "PbxInfo" message is received, which identifies the session as a session
        from the PBX. This class then uses this session to establish a signaling registration at
        the PBX, to be able to receive the subscription calls.
    </dd>
    
    <pre><code class="language-cpp">class BadgeCountSignaling : public JsonApi {
    const char * Name() { return "PbxSignal"; };
    void Message(class json_io & msg, word base, const char * mt, const char * src);
    void JsonApiConnectionClosed();

public:
    BadgeCountSignaling(class UBadgeCountSignaling * user, class AppUpdatesSession * session);
    ~BadgeCountSignaling();
    int nextCall();

    class UBadgeCountSignaling * user;
    class AppUpdatesSession * session;
    class btree * calls;
    int call;
};</code></pre>



    <h2 id="BadgeCountCall">BadgeCountCall</h2>

    <dd>
        Internal class, used by the library to handle a single subscription call
    </dd>
    
    <pre><code class="language-cpp">class BadgeCountCall : public btree {
    int btree_compare(void * key) { return (int)(intp)key - call; };
    int btree_compare(class btree * b) { return ((class BadgeCountCall *)b)->call - call; };
public:
    BadgeCountCall(class BadgeCountSignaling * signaling, int call);
    virtual ~BadgeCountCall();

    virtual void Signaling(class json_io & msg, word base, const char * src, const char * type) = 0;

    void SendConn();
    void SendRel();

    class BadgeCountSignaling * signaling;
    int call;
    byte state;
};</code></pre>



    <h2 id="BadgeCountPresenceMonitor">BadgeCountPresenceMonitor</h2>
    
    <dd>
        This class has to be used as base class for a class allocated in the CreateBadgeCountPresenceMonitor
        callback.
    </dd>

    <pre><code class="language-cpp">class BadgeCountPresenceMonitor : public BadgeCountCall {
    void Signaling(class json_io & msg, word base, const char * src, const char * type) override;

public:
    BadgeCountPresenceMonitor(class BadgeCountSignaling * signaling, int call);
    ~BadgeCountPresenceMonitor();

    void SendBadge(ulong64 count);
};</code></pre>



    <div class="fnhead">BadgeCountPresenceMonitor(class BadgeCountSignaling * signaling, int call)</div>

    <dd>
        Constructor. signaling and call are the arguments from the CreateBadgeCountPresenceMonitor
        function call
    </dd>

    <div class="fnhead">void SendBadge(ulong64 count)</div>

    <dd>
        Can be called to update a badge count. A typical implementation uses the AppUpdates library
        for these calls.
    </dd>
</body>
</html>

