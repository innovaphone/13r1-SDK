<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>ui.autocompleteinput</title>
    <link rel="stylesheet" href="../doc/innovaphone.doc.css" type="text/css" />
    <script src="../lib1/innovaphone.lib1.js" type="text/javascript"></script>
    <script src="../ui1.lib/innovaphone.ui1.lib.js" type="text/javascript"></script>
    <script src="innovaphone.ui1.autocompleteinput.js" type="text/javascript"></script>

    <script type="text/javascript">

        function Try() {
            var out = document.getElementById('out');
            out.innerText = "";
            eval(document.getElementById('code').value);

        }


    </script>
</head>

<body style="overflow:scroll">
    <h1>ui.autocompleteinput</h1>
    <button onclick="Try()">Try</button>
    <div style="position:relative; height:420px">
        <textarea id="code" style="position: absolute; left: 0px; top: 0px; width: 600px; height: 400px; border: 1px solid grey; font-family: Lucida Console">
            var inputConfig = new innovaphone.ui1.AutoCompleteInputConfig(null, "small", null, "suggest", "suggest-highlight", "suggest-dropdown")
            var inputText = new innovaphone.ui1.AutoCompleteInput(null, null, inputConfig);

            function callBackData(value) {
                var cars = ["Saab", "Suv", "Saaa", "BatMobile", "Bms", "Bmd", "Volvo", "BMW"];
                var resultArray = [];
                for (var i = 0; i < cars.length; i++) {
                    if (cars[i].toLowerCase().startsWith(value.toLowerCase())) {
                        resultArray.push(cars[i]);
                    }
                }

                return resultArray;
            }

            inputText.setDataCallBack(callBackData);

            out.appendChild(inputText.container);



            var inputTextSpiele = new innovaphone.ui1.AutoCompleteInput(null, null, inputConfig);

            function callBackDataSpiele(value) {
                var spiele = ["Backgammon", "Schafkopf", "MauMau", "Romme", "Canaster"];
                var resultArray = [];
                for (var i = 0; i < spiele.length; i++) {
                if (spiele[i].toLowerCase().startsWith(value.toLowerCase())) {
                resultArray.push(spiele[i]);
                }
            }

            return resultArray;
            }

            inputTextSpiele.setDataCallBack(callBackDataSpiele);

            out.appendChild(inputTextSpiele.container);


        </textarea>
        <div id="out" style="position:absolute; left:610px; top:0px; width:600px; height:400px; border:1px solid grey">

        </div>
    </div>
    
    <h1>innovaphone.ui1.AutoCompleteInputConfig(inputStyle, inputCl, suggestionStyle, suggestionCl, suggestionHighlightCl, dropDownCl)</h1>
    <ul>
        <li>This config class is handed to the actual innovaphone.ui1.AutoCompleteInput class to provide styles and classes.</li>
    </ul>
    <dl>
        <dt>inputStyle</dt>
        <dd>style definitions for the input element</dd>
        <dt>inputCl</dt>
        <dd>class for the input element</dd>
        <dt>suggestionStyle</dt>
        <dd>style definitions for the suggestion divs</dd>
        <dt>suggestionCl</dt>
        <dd>class for the suggestion divs</dd>
        <dt>suggestionHighlightCl</dt>
        <dd>class for a highlighted suggestion div</dd>
        <dt>dropDownCl</dt>
        <dd>class for the surrounding dropdown "box"</dd>
    </dl>

    <h1>innovaphone.ui.AutoCompleteInput(style, cl, config)</h1>
    <ul>
        <li>Input type that supports autocomplete through a callback function</li>
    </ul>
    <h2>Members</h2>
    <dl>
        <dt>container</dt>
        <dd>
        </dd>
        <dt>style</dt>
        <dd>
            exposes input.style
        </dd>
    </dl>
    <h2>Functions</h2>
    <dl>
        <dt>setDataCallBack(dataCallBack)</dt>
        <dd>
            Set a callback function - dataCallBack(value) - that will return the autocomplete values. The function should return an array of string based on the value argument, where value is the current value from the input text
        </dd>
        <dt>value()</dt>
        <dd>
            returns the current value of the input
        </dd>
        <dt>setValue(value)</dt>
        <dd>
            sets a new value
        </dd>
        <dt>focus()</dt>
        <dd>
            sets the focus on the element
        </dd>
        <dt>setSelectionRange(start, end)</dt>
        <dd>
        </dd>
        <dt>setMaxLength(maxLength)</dt>
        <dd>
            sets the maximum input length
        </dd>
        <dt>addEventListener(type, listener)</dt>
        <dd>
            adds events to the input element
        </dd>
        <dt>setWidth(width)</dt>
        <dd>
            sets the input field width
        </dd>
        <dt>setPlaceHolder(placeHolder)</dt>
        <dd>
            sets input.placeHolder (HTML5)
        </dd>
        <dt>setOnEnter(onEnter)</dt>
        <dd>
            sets a function which is executed on keydown enter
        </dd>
        <dt>setOnChange(func)</dt>
        <dd>
            executed if input value has changed
        </dd>
        <dt>checked()</dt>
        <dd>
            get checked member of checkbox
        </dd>
        <dt>check(checked)</dt>
        <dd>
            de-/activate checkbox
        </dd>
        <dt>setType(type)</dt>
        <dd>
            set input.type
        </dd>
        <dt>hasChanged()</dt>
        <dd>
            input value has changed?
        </dd>
        <dt>setTitle (title)</dt>
        <dd>
        </dd>
        <dt>enable()</dt>
        <dd>
        </dd>
        <dt>disable()</dt>
        <dd>
        </dd>
        <dt>isDisabled()</dt>
        <dd>
        </dd>

    </dl>




</body>
</html>
</html>
