<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - Time Occurrence</title>
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
</head>

<body>
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>

    <h1>Time occurrence</h1>
    <p>
        The time occurrence I interface is for calculating time occurrences based on rules given by a recurring master.
        This helps calculating time stamps for events like calendar appointments, scheduled events, and similar use cases.
        The library doesnâ€™t take care about time zones. It simply calculates the occurrences. So it is recommended to give
        the start and end time for the recurring master  in UTC time  and transfer the calculated value to a specified time zone
        using the <a href="../interface/timezone.h">ITimezone</a> interface (which also takes care about daylight saving time).
    </p>        
    <p>
        An recurring master actually is a set of base information need to define a series and calculate calculate each occurrence.
        This information will be the start time, and end time or a maximum number of occurrences (also no end time can be given to
        have a never ending series), an intervall and the rule for the calculation. A rule can be one of the following options:
    </p>
    <ul>
        <li><b>Daily</b>: This is for series that will occure each day.</li>
        <li><b>Weekly</b>: This is for series that will occure weekly. A weekly series can occure on each day in a week. This will be defined by passing
        a set of days. There are also predefined sets for week days and weekend days available.</li>
        <li><b>Monthly (absolute)</b>: This is for a monthly series with an absolute date inside the month (like every 15th day of a month).</li>
        <li><b>Monthly (relative)</b>: This is for monthly series with a relative day to occure (like every second Monday of a month or every fourth weekend day).</li>
        <li><b>Yearly (absolute)</b>: This is for series that will occure once a year at the given date.</li>
        <li><b>Yearlc (relative)</b>: This is for series that will occure once a year for a relative day for a month.</li>
    </ul>
    <p>
        Note: yearly recurring masters (absolute and relative) technically are the same as monthly occurrences with an interval of 12 month. The difference is, that
        the month for the occurrence can be defined for the yearly occurrence, while using a monthly occurrence with an interval of 12 will use the month of the
        given start date
    </p>
    
    <h2>File information</h2>
    <table style="margin-left:-12px">
        <tr><td><b>File</b></td><td>common/interface/socket.h<br><br></td></tr>
        <tr><td><b>Public functions</b></td><td>
                                       <a href="#IntToDays">IntToDays</a><br>
                                       <a href="#IntToMonth">IntToMonth</a><br>
                                       <br>
                                   </td></tr>
        <tr><td><b>Classes</b></td><td>
                                       <a href="#TimeOccurrence">TimeOccurrence</a><br>
                                       <a href="#UTimeOccurrence">UTimeOccurrence</a><br>
                                       <br>
                                   </td></tr>
        <tr><td><b>Data types</b></td><td>
                                       <a href="#recurring_days_t">recurring_days_t</a><br>
                                       <a href="#recurring_month_t">recurring_month_t</a><br>
                                       <a href="#RD_ALL_DAYS">RD_ALL_DAYS</a><br>
                                       <a href="#RD_WEEK_DAYS">RD_WEEK_DAYS</a><br>
                                       <a href="#RD_WEEKEND_DAYS">RD_WEEKEND_DAYS</a><br>
                                       <a href="#RD_NO_END_DATE">RD_NO_END_DATE</a><br>
                                       <a href="#RD_NO_LIMIT">RD_NO_LIMIT</a><br>
                                       <br>
                                      </td></tr>
        <tr><td><b>Examples</b></td><td>
                                      <a href="#example">Code Example</a><br>
                                      <br>
                                      </td></tr>
	</table>
	
    <h1>Functions</h1>
    <h2>Little helpers</h2>
    <pre><code class="C++">inline recurring_days_t IntToDays(int days);
inline recurring_month_t IntToMonth(int month)</code></pre>
    <br/>
    This functions are little helper functions to convert an integer value to a corresponding recurring_days_t or recurring_month_t enum. This helps when
    getting the days or month ids from other sources like a database.<br/>
    <br/>
    <div id="IntToDays" class="fnhead" style="margin-top:5px">IntToDays</div>
    <dd>
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">int <b>days</b></td><td>A day (or a set combined with or) to be converted to the recurring_days_t datatype.</td></tr>
        </table>
        <h4>Return value</h4>
        The value passed in recurring_days_t datatype. The value of the data is not changed. This only helps to make the compiler happy.
    </dd>

    <div id="IntToMonth" class="fnhead" style="margin-top:5px">IntToMonth</div>
    <dd>
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">int <b>month</b></td><td>A int defining a month to be converted to the recurring_days_t datatype.</td></tr>
        </table>
        <h4>Return value</h4>
        The value passed in recurring_month_t datatype. The value of the data is not changed. This only helps to make the compiler happy.
    </dd>
	
    <!-- Block with the classes -->
    <h1>Classes</h1>
	<h2 id="TimeOccurrence">TimeOccurrence</h2>
	<pre><code class="C++">class TimeOccurrence {
public:
    TimeOccurrence();
    ~TimeOccurrence();

    void SetDailyMaster(long64 start, long64 end = RD_NO_END_DATE, dword interval = 1, dword maxOccurrences = RD_NO_LIMIT);
    void SetWeeklyMaster(dword days, long64 start, long64 end = RD_NO_END_DATE, dword interval = 1, dword maxOccurrences = RD_NO_LIMIT);
    void SetMonthlyMaster(dword dayNum, recurring_days_t day, long64 start, long64 end = RD_NO_END_DATE, dword interval = 1, dword maxOccurrences = RD_NO_LIMIT);
    void SetYearlyMaster(dword dayNum, recurring_days_t day, recurring_month_t month, long64 start, long64 end = RD_NO_END_DATE, dword interval = 1, dword maxOccurrences = RD_NO_LIMIT);

    void SetWeekDays(word weekDays);
    void SetWeekEndDays(word weekEndDays);

    bool Empty() { return this->resultCount == 0; }
    size_t Count() { return this->resultCount; }
    long64 Result(size_t index);
    long64 operator[] (size_t index) { return this->Result(index); }

    void Calculate(long64 timePeriodStart = 0, long64 timePeriodEnd = RD_NO_END_DATE, dword maxResults = RD_NO_LIMIT);
    void Calculate(UTimeOccurrence * user, long64 timePeriodStart = 0, long64 timePeriodEnd = RD_NO_END_DATE);
    long64 CalculateFirstOccurrence(long64 timePeriodStart = 0);
    long64 CalculateLastOccurrence(dword numOfOccurrences = 0);
};</code></pre>
    <br/>
    The class that handles all the calculation. The result of the calculaten can be accessed by either a callback function (passing an UTimeOccurrence instance to the function
    to start calculation), or by accessing the internal array of results (see below).<br/>

    <h3>Public functions</h3>
    <div class="fnhead">SetDailyMaster</div>
    <dd>
        This function will set the recurring master as daily master for series that occure each day.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">long64 <b>start</b></td><td>The timestamp to start the series.</td></tr>
            <tr><td class="param">long64 <b>end</b></td><td><i>(Default: RD_NO_END_DATE)</i> The end date of the series. If RD_NO_END_DATE is given, the series won't end.</td></tr>
            <tr><td class="param">dword <b>interval</b></td><td><i>(Default: 1)</i> The interval for the occurrences (e. g. 2 for every second day).</td></tr>
            <tr><td class="param">dword <b>maxOccurrences</b></td><td><i>(Default: RD_NO_LIMIT)</i> The maximum occurrences than can happen for that series.</td></tr>
        </table>
        <h4>Remarks</h4>
        Using 0 as day will lead to an assertion. This also happens when setting an endDate AND the number of occurrences. Either one of them can be set. Note
        that the function to calculate also takes a maximum of occurrences to be calculated.
    </dd>

    <div class="fnhead">SetWeeklyMaster</div>
    <dd>
        This function will set the recurring master as weekly master for series that occure at one or more days a week. Each day count as an occurrence. So if the
        bitmask defines monday, wednesday and friday, the first occurrence will be monday, the second wednesday, the third friday, the fourth monday again and so on.
        There are predefined daysets that can be used to define the days (RD_WEEK_DAYS and RD_WEEKEND_DAYS).
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">dword <b>days</b></td><td>A bitmask with the days for the occurences.</td></tr>
            <tr><td class="param">long64 <b>start</b></td><td>The timestamp to start the series. Will be adjusted to point to the first day given in days.</td></tr>
            <tr><td class="param">long64 <b>end</b></td><td><i>(Default: RD_NO_END_DATE)</i> The end date of the series. If RD_NO_END_DATE is given, the series won't end.</td></tr>
            <tr><td class="param">dword <b>interval</b></td><td><i>(Default: 1)</i> The interval for the occurrences (e. g. 2 for every second week).</td></tr>
            <tr><td class="param">dword <b>maxOccurrences</b></td><td><i>(Default: RD_NO_LIMIT)</i> The maximum occurrences than can happen for that series.</td></tr>
        </table>
		
		<h4>Remarks</h4>
        Using 0 as day will lead to an assertion. This also happens when setting an endDate AND the number of occurrences. Either one of them can be set. Note
        that the function to calculate also takes a maximum of occurrences to be calculated.
    </dd>

    <div class="fnhead">SetMonthlyMaster</div>
    <dd>
        This function will set the recurring master as monthly master. Monthly masters can be used as absolute or relative recurrence. Absolute means passing RD_DAY as day, which leads
        to the day with the number given in dayNum will be the occurrence (e. g. 14th day of the month). Relative means to pass every other value from reccurring_days_t, which will
        calculate the occurrence for the number of the day with the given name (e. G. 3rd monday). If the result lies outside of the current month, the last valid day will be used.
        So asking for the 10th monday will always calculate the date of the last monday of the month. Note that in case of RD_WEEK_DAY, only sunday to friday will be used for the
        calculation, while for RD_WEEKEND_DAY, saturday and sunday will be used. However, it also can be changed what day to count as week day and weekend day. See
        <a href="SetWeekDays">SetWeekDays</a> and <a href="SetWeekEndDays">SetWeekEndDays</a> for details.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">dword <b>dayNum</b></td><td>The number of the day.</td></tr>
            <tr><td class="param">recurring_days_t <b>day</b></td><td>Can be RD_DAY (for absolute recurring master), RD_WEEK_DAY, RD_WEEKANDDAY or <b>one</b> of the day enums
                                                                      from RD_SUNDAY to RD_SATURDAY.</td></tr>
            <tr><td class="param">long64 <b>start</b></td><td>The timestamp to start the series. Will be adjusted to point to the first day given in day if.</td></tr>
            <tr><td class="param">long64 <b>end</b></td><td><i>(Default: RD_NO_END_DATE)</i> The end date of the series. If RD_NO_END_DATE is given, the series won't end.</td></tr>
            <tr><td class="param">dword <b>interval</b></td><td><i>(Default: 1)</i> The interval for the occurrences (e. g. 2 for every second month).</td></tr>
            <tr><td class="param">dword <b>maxOccurrences</b></td><td><i>(Default: RD_NO_LIMIT)</i> The maximum occurrences than can happen for that series.</td></tr>
        </table>
		
		<h4>Remarks</h4>
        Using 0 as day will lead to an assertion. This also happens when setting an endDate AND the number of occurrences. Either one of them can be set. Note
        that the function to calculate also takes a maximum of occurrences to be calculated.
    </dd>

    <div class="fnhead">SetYearlyMaster</div>
    <dd>
        This function will set the recurring master as yearly master. This will lead to only one occurence per year. Like a monthly master, a yearly one can be absolute or relative.
        Absolute means passing RD_DAY as day, which leads to day given in dayNum at the month given in month (so passing 12 as dayNum and RD_APRIL as month will calculate the 12th of April
        for a year). Relative means to pass every other value from reccurring_days_t, which will calculate the occurrence for the number of the day with the given name (e. G. 3rd monday)
        for the given month. If the result lies outside of the current month, the last valid day will be used. So asking for the 10th monday for month set to RD_JANUARY will always calculate
        the date of the last monday in January. Note that in case of RD_WEEK_DAY, only sunday to friday will be used for the calculation, while for RD_WEEKEND_DAY, saturday and sunday will
        be used. However, it also can be changed what day to count as week day and weekend day. See <a href="SetWeekDays">SetWeekDays</a> and <a href="SetWeekEndDays">SetWeekEndDays</a> for details.
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">dword <b>dayNum</b></td><td>The number of the day.</td></tr>
            <tr><td class="param">recurring_days_t <b>day</b></td><td>Can be RD_DAY (for absolute recurring master), RD_WEEK_DAY, RD_WEEKANDDAY or <b>one</b> of the day enums
                                                                      from RD_SUNDAY to RD_SATURDAY.</td></tr>
            <tr><td class="param">recurring_month_t <b>month</b></td><td><b>One</b> of the recurring_month_t enums (except RM_NO_MONTH).</td></tr>
            <tr><td class="param">long64 <b>start</b></td><td>The timestamp to start the series. Will be adjusted to point to the first day given in day if.</td></tr>
            <tr><td class="param">long64 <b>end</b></td><td><i>(Default: RD_NO_END_DATE)</i> The end date of the series. If RD_NO_END_DATE is given, the series won't end.</td></tr>
            <tr><td class="param">dword <b>interval</b></td><td><i>(Default: 1)</i> The interval for the occurrences (e. g. 2 for every second week).</td></tr>
            <tr><td class="param">dword <b>maxOccurrences</b></td><td><i>(Default: RD_NO_LIMIT)</i> The maximum occurrences than can happen for that series.</td></tr>
        </table>
		
		<h4>Remarks</h4>
        Using 0 as day will lead to an assertion. This also happens when setting an endDate AND the number of occurrences. Either one of them can be set. Note
        that the function to calculate also takes a maximum of occurrences to be calculated.
    </dd>

    
    <div class="fnhead">SetWeekDays</div>
    <dd>
        Will be used to define the days that count as week days. The value given here will be used by a monthly or yeary recurring master to calculate the occurrences, if
        RD_WEEK_DAY will be used as day.
        
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">word <b>weekDays</b></td><td>A bit mask of the recurring_days_t enums from RD_SUNDAY to RD_SATURDAY.</td></tr>
        </table>
		
		<h4>Remarks</h4>
        The default for the defined weekdays are the days Monday to Friday.
    </dd>

    <div class="fnhead">SetWeekendDays</div>
    <dd>
        Will be used to define the days that count as weekend days. The value given here will be used by a monthly or yeary recurring master to calculate the occurrences, if
        RD_WEEKEND_DAY will be used as day.
        
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">word <b>weekEndDays</b></td><td>A bit mask of the recurring_days_t enums from RD_SUNDAY to RD_SATURDAY.</td></tr>
        </table>
		
		<h4>Remarks</h4>
        The default for the defined weekdays are RD_SUNDAY and RD_SATURDAY.
    </dd>

    <div class="fnhead">Empty</div>
    <dd>
        <h4>Return Value</h4>
        True, if the internal result array is empty, else false.
        
        <h4>Remarks</h4>
        Should only be used when calculating occurrences without an UTimeOccurrence instance (see below).
    </dd>
    
    <div class="fnhead">Count</div>
    <dd>
        <h4>Return Value</h4>
        Returns the number of items inside the internal result array.
        
        <h4>Remarks</h4>
        Should only be used when calculating occurrences without an UTimeOccurrence instance (see below).
    </dd>
    
    <div class="fnhead">Result</div>
    <dd>
        Must be called to receive a result of the calculation from the internal array.
        
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">size_t <b>index</b></td><td>The index of the result to get. Must ba a value between 0 and Count() - 1.</td></tr>
        </table>

        <h4>Return Value</h4>
        The timestamp of the calculated occurrence for the given index.
        
        <h4>Remarks</h4>
        Should only be used when calculating occurrences without an UTimeOccurrence instance (see below).
    </dd>
    
    <div class="fnhead">operator []</div>
    <dd>
        Can be used to access the internal result array as an normal C array.
        
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">size_t <b>index</b></td><td>The index of the result to get. Must ba a value between 0 and Count() - 1.</td></tr>
        </table>

        <h4>Return Value</h4>
        The timestamp of the calculated occurrence for the given index.
        
        <h4>Remarks</h4>
        Should only be used when calculating occurrences without an UTimeOccurrence instance (see below).
    </dd>
    
    <div class="fnhead">Calculate (overloaded)</div>
    <dd>
        Starts the calculation by using the defined recurring master. So one of the Set*Master() functions must be called first! This version of the
        function calculates the requested number of occurrences and stores it inside an internal array. So be aware of how much occurrences you
        want to calculate, because it can easily eat up a lot of memory and also block the app, because the function will return after every calculation
        had been done. Use the oder Calculate() function that uses an UTimeOccurrence instance to have better control over the calculation (see below).
        
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">long64 <b>timePeriodStart</b></td><td><i>(Default 0)</i> The start of time period, for wich the occurrences should be calculated. If 0, the
                                                                                           start time set with the recurring master will be used.</td></tr>
            <tr><td class="param">long64 <b>timePeriodEnd</b></td><td><i>(Default RD_NO_END_DATE)</i> The end of the time period, for wich the occurrences should be calculated. If
                                                                                                      RD_NO_END_DATE, the end date of the recurring master or the number of occurrences
                                                                                                      will be used (depending on what had been defined while setting the recurring master).</td></tr>
            <tr><td class="param">word <b>maxResults</b></td><td><i>(Default RD_NO_LIMIT)</i> The number of occurrences to calculate. If the end of the series is reached (either by an end date or a
                                                                                              number of occurrences defined through the recurring master), this end has priority. If set to RD_NO_LIMIT,
                                                                                              the end of the series defined by the recurring master will end the calculation.</td></tr>
        </table>

        <h4>Remarks</h4>
        <b>WARNING:</b> When calling this function with timePeriodEnd set to RD_NO_END_DATE and maxResults set to RD_NO_LIMIT, using a recurring master with no end date and no numbered limit
        for occurrences, this function will never return becaus staying in an endless loop, eating up memory without end and consuming 100% of CPU time. With great power comes great responsibility.
    </dd>
    
    <div class="fnhead">Calculate (overloaded)</div>
    <dd>
        Starts the calculation by using the defined recurring master. So one of the Set*Master() functions must be called first! This version function calculates a occurrences
        and calls back the given user passing the result before continuing calculating the next occurrence. Instead of the other Calculate() function, this one does not store the
        values inside the internal array. On the other hand, the user called can cancel the calculation before the end has reached.        
        
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">UTimeOccurrence * <b>user</b></td><td>The user to call back for each calculated occurrence.</td></tr>
            <tr><td class="param">long64 <b>timePeriodStart</b></td><td><i>(Default 0)</i> The start of time period, for wich the occurrences should be calculated. If 0, the
                                                                                           start time set with the recurring master will be used.</td></tr>
            <tr><td class="param">long64 <b>timePeriodEnd</b></td><td><i>(Default RD_NO_END_DATE)</i> The end of the time period, for wich the occurrences should be calculated. If
                                                                                                      RD_NO_END_DATE, the end date of the recurring master or the number of occurrences
                                                                                                      will be used (depending on what had been defined while setting the recurring master).</td></tr>
        </table>
    </dd>
    
    <div class="fnhead">CalculateFirstOccurrence</div>
    <dd>
        Calculates the first occurrence for the recurring master, starting from the given timePeriodStart. If the recurring master is set for a daily series, the return value
        will be timePeriodStart or the start of the series, if timePeriodStart is 0. For every other recurring master type, the result will be the first occurrence that
        combines with the defined rule from the given timePeriodStart on the start of the series (when timePeriodStart is 0).
        
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">long64 <b>timePeriodStart</b></td><td><i>(Default 0)</i> The start of time period, for wich the first occurrenc should be calculated. If 0, the
                                                                                           start time set with the recurring master will be used.</td></tr>
        </table>
        
        <h4>Return Value</h4>
        The first occurrence of the series.
    </dd>

    <div class="fnhead">CalculateLastOccurrence</div>
    <dd>
        Calculates the last occurrence for the series. The calculation will be done in a direct way without iterrating through all the occurrences. So if the end of the series
        is needed, this function will be faster than calling Calculate() until the end of the series had been reached.
        
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">long64 <b>timePeriodStart</b></td><td><i>(Default 0)</i> The start of time period, for wich the first occurrenc should be calculated. If 0, the
                                                                                           start time set with the recurring master will be used.</td></tr>
        </table>
        
        <h4>Return Value</h4>
        The end of the series.
        
        <h4>Remarks</h4>
        The end of the series can be either the occurrence with the number given in numOfOccurrences, the occurrence for the end date of the series (if defined by the recurring master)
        or the occurrence with the number of the maximum occurrences to calculate (again, if defined by the recurring master). If the series ends before the number of occurrences given
        in numOfOccurrences had been reached, that last occurence will be returned. So there is no guarantee, that the requested quantity will be calculated. If numOfOccurrences is 0,
        the series end date is set to RD_NO_END and the number of maxOccurrences for the series is RD_NO_LIMIT, the function will return RD_NO_END.
    </dd>

	<h2 id="UTimeOccurrence">UTimeOccurrence</h2>
	<pre><code class="C++">class UTimeOccurrence {
public:
    UTimeOccurrence() {}
    virtual ~UTimeOccurrence() {}
    virtual bool TimeOccurrenceResult(class TimeOccurrence * timeOccurrence, long64 timeStamp) { return false; }
};</code></pre>
    <p>
        The User can be passed to one of the TimeOccurrence::Calculat() function. For each occurrence calculated, UTimeOccurrence::TimeOccurrenceResult() will be
        called. The function should made what ever needed with the given timestamp and decide, whether to continue the calculation or not by returning ture or false.
    </p>
		
    <h3>Public functions</h3>
    <h4>Parameters</h4>
    <div class="fnhead">TimeOccurrenceResult</div>
    <dd>
        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr><td class="param">TimeOccurrence * <b>timeOccurrence</b></td><td>The calling TimeOccurrence instance.</td></tr>
            <tr><td class="param">long64 <b>timeStamp</b></td><td>The time stamp for the calculated time occurrence.</td></tr>
        </table>
        
        <h4>Return Value</h4>
        The function must return true, if the next occurrence should be calculated, or false, to cancel calculation. Note that returning true doesn't mean,
        that the calculation will continue. If the end of the series had been reached (defined by the end date or the maxOccurrence value) or if the number
        of requested occurrences had been calculated, the calculation stops even if the function retruns true;
    </dd>

    
    <h1>Data types</h1>
    <h2>Defines / Statics</h2>
    <table style="margin-left: 20px">
        <tr><td id="RD_ALL_DAYS"><b>RD_ALL_DAYS</b></td><td>A bitmask combination of all recurring_days_t day enums (RD_SUNDAY | RD_MONDAY | RD_TUESDAY | RD_WEDNESDAY | RD_THURSDAY | RD_FRIDAY | RD_SATURDAY)</td></tr>
        <tr><td id="RD_WEEK_DAYS"><b>RD_WEEK_DAYS</b></td><td>A bitmask of recurring_days_t day enums, defining the week days (RD_MONDAY | RD_TUESDAY | RD_WEDNESDAY | RD_THURSDAY | RD_FRIDAY).</td></tr>
        <tr><td id="RD_WEEKEND_DAYS"><b>RD_WEEKEND_DAYS</b></td><td>A bitmask of recurring_days_t day enums, defining the weekend days (RD_SUNDAY | RD_SATURDAY).</td></tr>
        <tr><td id="RD_NO_END_DATE"><b>RD_NO_END_DATE</b></td><td>Used to define an series without an end date. Is set to INT64_MAX.</td></tr>
        <tr><td id="RD_NO_LIMIT"><b>RD_NO_LIMIT</b></td><td>Used to define that a series has no numbered limit. Is set to INT64_MAX.</td></tr>
    </table>

    <h2 id="recurring_days_t">recurring_days_t</h2>
    <pre><code style="laguage-cpp">typedef enum {
    RD_NO_DAY = 0x0000,
    RD_SUNDAY = 0x0001,
    RD_MONDAY = 0x0002,
    RD_TUESDAY = 0x0004,
    RD_WEDNESDAY = 0x0008,
    RD_THURSDAY = 0x0010,
    RD_FRIDAY = 0x0020,
    RD_SATURDAY = 0x0040,
    // The recurring types can also day, week day or weekend day (like: 3rd day of month, 2nd weekday our 1st weekend day)
    RD_DAY = 0x0080,
    RD_WEEK_DAY = 0x0100,
    RD_WEEKEND_DAY = 0x0200
} recurring_days_t;</code></pre>
    <br/>
    These enums are used to define the days needed for the recurring masters.

    <h3>Values</h3>
    <table style="margin-left: 20px">
        <tr><td><b>RD_NO_DAY</b></td><td>Used internally only, don't pass it to any function.</td></tr>
        <tr><td><b>RD_SUNDAY</b></td><td>The enum for Sunday.</td></tr>
        <tr><td><b>RD_MONDAY</b></td><td>The enum for Monday.</td></tr>
        <tr><td><b>RD_TUESDAY</b></td><td>The enum for Tuesday.</td></tr>
        <tr><td><b>RD_WEDNESDAY</b></td><td>The enum for Wednesday.</td></tr>
        <tr><td><b>RD_THURSDAY</b></td><td>The enum for Thursday.</td></tr>
        <tr><td><b>RD_FRIDAY</b></td><td>The enum for Friday.</td></tr>
        <tr><td><b>RD_SATURDAY</b></td><td>The enum for Saturday.</td></tr>
        <tr><td><b>RD_DAY</b></td><td>(Use only for TimeOccurrence::SetMonthlyMaster and TimeOccurrence::SetYearlyMaster): Used to define the monthly or yearly recurring master to be absolute.</td></tr>
        <tr><td><b>RD_WEEK_DAY</b></td><td>(Use only for TimeOccurrence::SetMonthlyMaster and TimeOccurrence::SetYearlyMaster): Used to define the monthly or yearly calculate weekdays only. Weekdays can be define with TimeOccurrence::SetWeekDays().</td></tr>
        <tr><td><b>RD_WEEKEND_DAY</b></td><td>(Use only for TimeOccurrence::SetMonthlyMaster and TimeOccurrence::SetYearlyMaster): Used to define the monthly or yearly calculate weekenddays only. Weekenddays can be define with TimeOccurrence::SetWeekendDays().</td></tr>
    </table>

    <h2 id="recurring_month_t">recurring_month_t</h2>
    <pre><code style="laguage-cpp">typedef enum {
    RM_JANUARY,
    RM_FEBRURARY,
    RM_MARCH,
    RM_APRIL,
    RM_MAY,
    RM_JUNE,
    RM_JULY,
    RM_AUGUST,
    RM_SEPTEMBER,
    RM_OCTOBER,
    RM_NOVEMBER,
    RM_DECEMBER,
    RM_NO_MONTH = 0xFFFF
} recurring_month_t;</code></pre>
    <br/>
    These enums are used to define the month for TimeOccurrence::SetMonthlyMaster() and TimeOccurrence::SetYearlyMaster().

    <h3>Values</h3>
    <table style="margin-left: 20px">
        <tr><td><b>RM_JANUARY</b></td><td>The enum for January.</td></tr>
        <tr><td><b>RM_FEBRUARY</b></td><td>The enum for february.</td></tr>
        <tr><td><b>RM_MARCH</b></td><td>The enum for Marc.</td></tr>
        <tr><td><b>RM_APRIL</b></td><td>The enum for April.</td></tr>
        <tr><td><b>RM_MAY</b></td><td>The enum for May.</td></tr>
        <tr><td><b>RM_JUNE</b></td><td>The enum for June.</td></tr>
        <tr><td><b>RM_JULY</b></td><td>The enum for July.</td></tr>
        <tr><td><b>RM_AUGUST</b></td><td>The enum for August.</td></tr>
        <tr><td><b>RM_SEPTEMBER</b></td><td>The enum for September.</td></tr>
        <tr><td><b>RM_OCTOBER</b></td><td>The enum for October.</td></tr>
        <tr><td><b>RM_NOVEMBER</b></td><td>The enum for November.</td></tr>
        <tr><td><b>RM_DECEMBER</b></td><td>The enum for December.</td></tr>
        <tr><td><b>RM_NO_MONTH</b></td><td>Used internally only, don't pass it to any function.</td></tr>
    </table>
    
    <h1 id="example">Code examples</h1>
    <pre><code class="C++">constexpr long64 THREE_DAYS_MS = 259200000;
char buf[30];
TimeOccurrence timeOccurrence;

// Let' sassume the returned date will be Thuesday, the 5th of March 2019.
long64 t = ITime::TimeStampMilliseconds();
ITime::FormatTimeStampISO(buf, sizeof(buf), t);

debug->printf("Now: %s", buf); // Now: 2019-03-05T14:00:00

timeOccurrence.SetWeeklyMaster(RD_MONDAY | RD_THURSDAY, t - THREE_DAYS_MS);
timeOccurrence.Calculate(t, RD_NO_END_DATE, 3);

// The loop will produce the following output:
//
// Occurrence #1: 2019-03-07T14:00:00
// Occurrence #2: 2019-03-11T14:00:00
// Occurrence #3: 2019-03-14T14:00:00
//
for (int i = 0; i &lt; timeOccurrence.Count(); ++i) {
    ITime::FormatTimeStampISO(buf, sizeof(buf), timeOccurrence[i]);
    debug->printf("Occurrence #%i: %s", i + 1, buf);
}</code></pre>
</body>
</html>
